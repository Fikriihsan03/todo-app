{"version":3,"sources":["component/InputField.js","component/InfoBar.js","component/Task.js","containers/TasksList.js","containers/App.js","reportWebVitals.js","index.js"],"names":["InputField","add","total","useState","currentValue","setValue","className","value","type","onChange","event","target","disabled","onClick","newTask","id","length","massage","addTask","InfoBar","totalTasks","Task","setTask","currentTask","React","toggledTrue","setToggled","prevtoggle","deletedTask","filter","task","handleDelete","TasksList","tasks","map","App","currentData","setData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAsBeA,EApBI,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,IAAIC,EAAW,EAAXA,MAAW,EACAC,mBAAS,IADT,mBACzBC,EADyB,KACZC,EADY,KAWhC,OACI,mCACA,sBAAKC,UAAU,oCAAf,UACA,uBAAOC,MAAOH,EAAaI,KAAK,OAAOC,SAAY,SAAAC,GAAK,OAAIL,EAASK,EAAMC,OAAOJ,UAClF,wBAAQK,SAAyB,KAAfR,EAAkBE,UAAW,8BAA8BO,QAAS,kBAb1E,WACZ,IAAMC,EAAU,CACZC,GAAGb,EAAMc,OAAO,EAChBC,QAASb,GAEbH,EAAI,GAAD,mBAAKC,GAAL,CAAWY,KACdT,EAAS,IAOiFa,YCP/EC,EARH,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAET,OAAgB,IAAbA,EACS,mBAAGd,UAAY,+BAAf,mDAEA,oBAAGA,UAAY,+BAAf,2BAA4D,4BAAIc,IAAhE,cCeNC,G,MApBF,SAAC,GAAqC,IAApCJ,EAAmC,EAAnCA,QAAQF,EAA2B,EAA3BA,GAAGO,EAAwB,EAAxBA,QAAQC,EAAgB,EAAhBA,YAAgB,EAKbC,IAAMrB,UAAS,GALF,mBAKvCsB,EALuC,KAK3BC,EAL2B,KAM9C,OACI,mCACA,sBAAKpB,UAAW,oCAAhB,UACA,mBAAGO,QAAS,kBAAIa,GAAW,SAAAC,GAAU,OAAKA,MAC1CrB,UAAWmB,EAAY,sBAAuB,kBAE1C,oBAAInB,UAAU,qBAAd,SACKW,IAEL,wBAAQJ,QAAS,kBAdJ,WACjB,IAAMe,EAAaL,EAAYM,QAAO,SAAAC,GAAI,OAAEA,EAAKf,KAAKA,KACtDO,EAAQM,GAYiBG,IAAezB,UAAU,yCCT3C0B,EALG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,MAAMX,EAAY,EAAZA,QAC1B,OAAOW,EAAMC,KAAI,SAAAJ,GACb,OAAO,cAAC,EAAD,CAAMb,QAASa,EAAKb,QAAuBF,GAAIe,EAAKf,GAAIO,QAASA,EAASC,YAAaU,GAArDH,EAAKf,QCkBnCoB,G,MAfH,WACV,IADc,EAEgBhC,mBADjB,IADC,mBAEPiC,EAFO,KAEKC,EAFL,KAGZ,OACE,mCACA,sBAAK/B,UAAY,aAAjB,UACA,oBAAIA,UAAY,6BAAhB,sBACA,cAAC,EAAD,CAASc,WAAcgB,EAAYpB,SACnC,cAAC,EAAD,CAAYf,IAAKoC,EAASnC,MAAOkC,IACjC,cAAC,EAAD,CAAWH,MAAOG,EAAcd,QAASe,WCLhCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7abb0828.chunk.js","sourcesContent":["import React ,{ useState}from 'react';\n\nconst InputField = ({add,total}) => {\n    const [currentValue,setValue] = useState('')\n    const addTask = () =>{\n        const newTask = {\n            id:total.length+1,\n            massage :currentValue,\n        }\n        add([...total,newTask])\n        setValue('')\n    }\n    \n    return(\n        <>\n        <div className=\"row d-flex justify-content-center\">\n        <input value={currentValue}type=\"text\" onChange ={(event => setValue(event.target.value))} />\n        <button disabled={currentValue===''}className =\"btn btn-primary fas fa-plus\" onClick={()=>addTask()} ></button>\n        </div>\n        </>\n    )\n}\nexport default InputField;","import React from 'react';\n\nconst InfoBar = ({totalTasks}) => {\n    \n         if(totalTasks===0){\n            return   <p className = \"alert alert-info text-center\">tidak ada tasks yang perlu dikerjakan</p>\n         }else{\n            return   <p className = \"alert alert-info text-center\">kamu memiliki <b>{totalTasks}</b> tasks </p>\n        }\n    }\n    export default InfoBar;","import React from 'react';\nimport './Task.css'\nconst Task = ({massage,id,setTask,currentTask}) =>{\n    const handleDelete = () =>{\n        const deletedTask= currentTask.filter(task=>task.id!==id)\n        setTask(deletedTask)\n    }\n    const [toggledTrue,setToggled] = React.useState(false)\n    return (\n        <>\n        <div className =\"row d-flex justify-content-center\">\n        <i onClick={()=>setToggled(prevtoggle => !prevtoggle)} \n        className={toggledTrue?\"fas fa-check-square\": \"far fa-square\"}>\n        </i>\n            <li className=\"col-md-9 col-sm-5 \">\n                {massage}\n            </li>\n            <button onClick={()=>handleDelete()}className=\"col-md-2 col-sm-1 fa fa-trash\"></button>\n        </div>\n        </>\n        )\n    }\nexport default Task;\n","import React from 'react';\nimport Task from '../component/Task';\n\nconst TasksList = ({tasks,setTask}) =>{\nreturn tasks.map(task =>{\n    return <Task massage={task.massage} key={task.id} id={task.id} setTask={setTask} currentTask={tasks}/>\n})\n}\nexport default TasksList","import React ,{useState}from 'react';\nimport InputField from '../component/InputField';\nimport InfoBar from '../component/InfoBar';\nimport TasksList from './TasksList'\nimport './App.css'\n\n\n\nconst App = ()=>{\n  const data = []\n  const [currentData,setData] = useState(data)\n    return (\n      <>\n      <div className = \"container \">\n      <h1 className = \"text-center text-uppercase\">my tasks</h1>\n      <InfoBar totalTasks = {currentData.length}  />\n      <InputField add={setData} total={currentData} />\n      <TasksList tasks={currentData}  setTask={setData} />\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}