{"version":3,"sources":["component/InputField.js","component/InfoBar.js","component/Task.js","containers/TasksList.js","containers/App.js","reportWebVitals.js","index.js"],"names":["InputField","add","total","useState","currentValue","setValue","className","value","type","onChange","event","target","disabled","onClick","newTask","id","Date","now","massage","isDone","addTask","InfoBar","totalTasks","Task","setTask","currentTask","React","toggledTrue","setToggled","prevtoggle","deletedTask","filter","task","handleDelete","TasksList","tasks","map","isdDone","App","currentData","setData","isReturningUsers","localStorage","savedMode","JSON","parse","getItem","userPrefersDark","window","matchMedia","matches","getPrefersColorScheme","getInitialMode","darkMode","setDarkMode","useEffect","setItem","stringify","defaultChecked","prevMode","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1294f8a.chunk.js","sourcesContent":["import React ,{ useState}from 'react';\n\nconst InputField = ({add,total}) => {\n    const [currentValue,setValue] = useState('')\n    const addTask = () =>{\n        const newTask = {\n            id:Date.now(),\n            massage :currentValue,\n            isDone:false\n        }\n        add([...total,newTask])\n        setValue('')\n    }\n    \n    return(\n        <>\n        <div className=\"row d-flex justify-content-center\">\n        <input value={currentValue}type=\"text\" onChange ={(event => setValue(event.target.value))} />\n        <button disabled={currentValue===''}className =\"btn btn-primary fas fa-plus\" onClick={()=>addTask()} ></button>\n        </div>\n        </>\n    )\n}\nexport default InputField;","import React from 'react';\n\nconst InfoBar = ({totalTasks}) => {\n    \n         if(totalTasks===0){\n            return   <p className = \"alert alert-info text-center\">tidak ada tasks yang perlu dikerjakan</p>\n         }else{\n            return   <p className = \"alert alert-info text-center\">kamu memiliki <b>{totalTasks}</b> tasks </p>\n        }\n    }\n    export default InfoBar;","import React from 'react';\nimport './Task.css'\nconst Task = ({massage,id,setTask,currentTask}) =>{\n    const handleDelete = () =>{\n        const deletedTask= currentTask.filter(task=>task.id!==id)\n        setTask(deletedTask)\n    }\n    const [toggledTrue,setToggled] = React.useState(false)\n    return (\n        <>\n        <div className =\"container row d-flex justify-content-between\">\n        <i onClick={()=>setToggled(prevtoggle => !prevtoggle)} \n            className={toggledTrue?\"fas fa-check-square\": \"far fa-square\"}>\n        </i>\n            <li >{massage}</li>\n            <button onClick={()=>handleDelete()}className=\" fa fa-trash btn btn-primary\"></button>\n        </div>\n        </>\n        )\n    }\nexport default Task;\n","import React from 'react';\nimport Task from '../component/Task';\n\nconst TasksList = ({tasks,setTask}) =>{\nreturn tasks.map(task =>{\n    return <Task massage={task.massage} key={task.id} id={task.id} isdDone={task.isDone} setTask={setTask} currentTask={tasks}/>\n})\n}\nexport default TasksList","import React ,{useState,useEffect}from 'react';\nimport InputField from '../component/InputField';\nimport InfoBar from '../component/InfoBar';\nimport TasksList from './TasksList'\nimport './App.css'\n\n\n\nconst App = ()=>{\n  const data = []\n  const [currentData,setData] = useState(data)\n  const [darkMode,setDarkMode] = useState(getInitialMode())\n  //store the todo list in the local storage\n  useEffect(()=>{\n    if(localStorage.getItem(\"todos\")){\n      setData(JSON.parse(localStorage.getItem(\"todos\")))\n    }\n  },[])\n  useEffect(()=>{\n    localStorage.setItem(\"todos\",JSON.stringify(currentData))\n  },[currentData])\n    //store the darkmode boolean in the local storage\n  useEffect(()=>{\n    localStorage.setItem(\"mode\",JSON.stringify(darkMode))\n  },[darkMode])\n   \n  function getInitialMode (){\n    var isReturningUsers = \"mode\" in localStorage;\n    var savedMode =JSON.parse(localStorage.getItem(\"mode\"));\n    var userPrefersDark = getPrefersColorScheme();\n    if(isReturningUsers){\n      return savedMode\n    }else if(userPrefersDark){\n      return true\n    }else{\n      return false\n    }\n  }\n  function getPrefersColorScheme(){\n    if(window.matchMedia)return;\n    \n    return window.matchMedia(\"(prefers-color-scheme:mode)\").matches;\n  }\n  return (\n      <>\n      <div className={darkMode ? \"card-body dark-mode\":\"card-body light-mode\"}>\n        <div className=\"dark-mode\">\n          <div className = \"container\">\n            <h1 className = \"text-center text-uppercase\">my tasks</h1>\n              <div className=\"row\">\n              <p>Darkmode</p>\n              <label className=\"switch\">\n                  <input defaultChecked={darkMode}type=\"checkbox\" onClick={()=>setDarkMode(prevMode => !prevMode)} />\n                  <span className=\"slider round\"></span>\n                </label>\n              </div>\n            <InfoBar totalTasks = {currentData.length}  />\n            <InputField add={setData} total={currentData} />\n            <TasksList tasks={currentData}  setTask={setData} />\n          </div>\n        </div>\n      </div>\n    </>\n      );\n    }\nexport default App;\n\n\n\n              \n\n\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}