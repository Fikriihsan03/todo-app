{"version":3,"sources":["component/InputField.js","component/InfoBar.js","component/Task.js","containers/TasksList.js","containers/App.js","reportWebVitals.js","index.js"],"names":["InputField","add","total","useState","currentValue","setValue","className","value","type","onChange","event","target","disabled","onClick","newTask","id","Date","now","massage","isDone","addTask","InfoBar","totalTasks","Task","setTask","currentTask","React","toggledTrue","setToggled","useEffect","todos","JSON","parse","localStorage","getItem","todo","findIndex","newArray","jsonString","stringify","setItem","prevtoggle","deletedTask","filter","task","handleDelete","TasksList","tasks","map","App","currentData","setData","isReturningUsers","savedMode","userPrefersDark","window","matchMedia","matches","getPrefersColorScheme","getInitialMode","darkMode","setDarkMode","defaultChecked","prevMode","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbdf77e4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst InputField = ({ add, total }) => {\n  const [currentValue, setValue] = useState(\"\");\n  const addTask = () => {\n    const newTask = {\n      id: Date.now(),\n      massage: currentValue,\n      isDone: false,\n    };\n    add([...total, newTask]);\n    setValue(\"\");\n  };\n\n  return (\n    <>\n      <div className=\"row d-flex justify-content-center\">\n        <input\n          value={currentValue}\n          type=\"text\"\n          onChange={(event) => setValue(event.target.value)}\n        />\n        <button\n          disabled={currentValue === \"\"}\n          className=\"btn-primary fas fa-plus\"\n          onClick={() => addTask()}\n        ></button>\n      </div>\n    </>\n  );\n};\nexport default InputField;\n","import React from 'react';\n\nconst InfoBar = ({totalTasks}) => {\n    \n         if(totalTasks===0){\n            return   <p className = \"alert alert-info text-center\">tidak ada tasks yang perlu dikerjakan</p>\n         }else{\n            return   <p className = \"alert alert-info text-center\">kamu memiliki <b>{totalTasks}</b> tasks </p>\n        }\n    }\n    export default InfoBar;","import React from \"react\";\nimport \"./Task.css\";\nconst Task = ({ massage, id, setTask, currentTask, isDone }) => {\n  const handleDelete = () => {\n    const deletedTask = currentTask.filter((task) => task.id !== id);\n    setTask(deletedTask);\n  };\n  const [toggledTrue, setToggled] = React.useState(isDone);\n  React.useEffect(() => {\n    const todos = JSON.parse(localStorage.getItem(\"todos\"));\n    const todo = todos.findIndex((todo) => todo.id === id);\n\n    let newArray = [...todos];\n    newArray[todo] = {\n      ...newArray[todo],\n      isDone: toggledTrue,\n    };\n\n    const jsonString = JSON.stringify(newArray);\n    localStorage.setItem(\"todos\", jsonString);\n  }, [toggledTrue, id]);\n  return (\n    <>\n      <div className=\"container row d-flex justify-content-between\">\n        <i\n          onClick={() => setToggled((prevtoggle) => !prevtoggle)}\n          className={toggledTrue ? \"fas fa-check-square\" : \"far fa-square\"}\n        ></i>\n        <li>{massage}</li>\n        <button\n          onClick={() => handleDelete()}\n          className=\" fa fa-trash btn btn-primary\"\n        ></button>\n      </div>\n    </>\n  );\n};\nexport default Task;\n","import React from \"react\";\nimport Task from \"../component/Task\";\n\nconst TasksList = ({ tasks, setTask }) => {\n  return tasks.map((task) => {\n    return (\n      <Task\n        massage={task.massage}\n        key={task.id}\n        id={task.id}\n        isDone={task.isDone}\n        setTask={setTask}\n        currentTask={tasks}\n      />\n    );\n  });\n};\nexport default TasksList;\n","import React, { useState, useEffect } from \"react\";\nimport InputField from \"../component/InputField\";\nimport InfoBar from \"../component/InfoBar\";\nimport TasksList from \"./TasksList\";\nimport \"./App.css\";\n\nconst App = () => {\n  const data = [];\n  const [currentData, setData] = useState(data);\n  const [darkMode, setDarkMode] = useState(getInitialMode());\n  //store the todo list in the local storage\n  useEffect(() => {\n    if (localStorage.getItem(\"todos\")) {\n      setData(JSON.parse(localStorage.getItem(\"todos\")));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(currentData));\n  }, [currentData]);\n  //store the darkmode boolean in the local storage\n  useEffect(() => {\n    localStorage.setItem(\"mode\", JSON.stringify(darkMode));\n  }, [darkMode]);\n\n  function getInitialMode() {\n    var isReturningUsers = \"mode\" in localStorage;\n    var savedMode = JSON.parse(localStorage.getItem(\"mode\"));\n    var userPrefersDark = getPrefersColorScheme();\n    if (isReturningUsers) {\n      return savedMode;\n    } else if (userPrefersDark) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  function getPrefersColorScheme() {\n    if (window.matchMedia) return;\n\n    return window.matchMedia(\"(prefers-color-scheme:mode)\").matches;\n  }\n  return (\n    <>\n      <div\n        className={darkMode ? \"card-body dark-mode\" : \"card-body light-mode\"}\n      >\n        <div className=\"dark-mode\">\n          <div className=\"container\">\n            <h1 className=\"text-center text-uppercase\">my tasks</h1>\n            <div className=\"row\">\n              <p>Darkmode</p>\n              <label className=\"switch\">\n                <input\n                  defaultChecked={darkMode}\n                  type=\"checkbox\"\n                  onClick={() => setDarkMode((prevMode) => !prevMode)}\n                />\n                <span className=\"slider round\"></span>\n              </label>\n            </div>\n            <InfoBar totalTasks={currentData.length} />\n            <InputField add={setData} total={currentData} />\n            <TasksList tasks={currentData} setTask={setData} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}